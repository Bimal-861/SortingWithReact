{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desktop\\\\SortingVisualizer\\\\Sorting-Algorithm-Visualizer-main\\\\src\\\\SortingVisualizer.js\";\nimport React from \"react\";\nimport \"./SortingVisualizer.css\";\nclass Tuple {\n  constructor(first, second, operation) {\n    this.first = first;\n    this.second = second;\n    this.operation = operation;\n  }\n}\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [],\n      sortingAlgorithm: \"\",\n      size: \"\",\n      speed: \"\",\n      barColor: \"\",\n      pointerColor: \"\",\n      sort: false,\n      randomize: false\n    };\n    this.sorted = false;\n    this.width = 0;\n    this.height = 0;\n  }\n  componentDidMount() {\n    console.log(\"Console did mount\");\n    this.width = window.screen.width;\n    this.height = window.screen.height;\n    let controllerData = this.props.controllerData;\n    let temp = new Set();\n    while (temp.size !== parseInt(controllerData[\"size\"])) {\n      temp.add(this.getRandomElement());\n    }\n    temp = Array.from(temp);\n    this.setState({\n      arr: temp,\n      sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n      size: controllerData[\"size\"],\n      speed: controllerData[\"speed\"],\n      barColor: this.getColor(controllerData[\"barColor\"]),\n      pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n      sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n      sort: controllerData[\"sort\"],\n      randomize: controllerData[\"randomize\"]\n    });\n  }\n  componentDidUpdate(previousProps, previousState) {\n    //console.log(\"Component did update mount\")\n    if (previousProps.controllerData !== this.props.controllerData) {\n      let controllerData = this.props.controllerData;\n      let cd = {};\n      if (controllerData[\"sort\"] === true) {\n        cd = {\n          sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n          size: controllerData[\"size\"],\n          speed: controllerData[\"speed\"],\n          barColor: this.getColor(controllerData[\"barColor\"]),\n          pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n          sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n          sort: controllerData[\"sort\"],\n          randomize: controllerData[\"randomize\"]\n        };\n        switch (controllerData.sortingAlgorithm) {\n          case \"Cocktail Sort\":\n            this.setState(cd, function () {\n              this.cocktailSort();\n            });\n            break;\n          case \"Heap Sort\":\n            this.setState(cd, function () {\n              this.heapSort();\n            });\n            break;\n          case \"Insertion Sort\":\n            this.setState(cd, function () {\n              this.insertionSort();\n            });\n            break;\n          case \"Linear Sort\":\n            this.setState(cd, function () {\n              this.linearSort();\n            });\n            break;\n          case \"Merge Sort\":\n            this.setState(cd, function () {\n              this.mergeSortUtil();\n            });\n            break;\n          case \"Quick Sort\":\n            this.setState(cd, function () {\n              this.quickSortUtil();\n            });\n            break;\n          case \"Selection Sort\":\n            this.setState(cd, function () {\n              this.selectionSort();\n              console.log(\"Selection sort\");\n            });\n            break;\n          default:\n            this.setState(cd, function () {\n              this.bubbleSort();\n              //console.log(\"bubble sort\")\n            });\n            break;\n        }\n      } // if sort=== true ends\n      else {\n        let newState = {};\n        let temp = new Set();\n        if (parseInt(this.state[\"size\"]) !== parseInt(controllerData[\"size\"])) {\n          newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n          newState[\"size\"] = parseInt(controllerData[\"size\"]);\n          newState[\"speed\"] = controllerData[\"speed\"];\n          newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n          newState[\"pointerColor\"] = this.getColor(controllerData[\"pointerColor\"]);\n          newState[\"sortedColor\"] = this.getColor(controllerData[\"sortedColor\"]);\n          newState[\"randomize\"] = controllerData[\"randomize\"];\n          newState[\"sort\"] = controllerData[\"sort\"];\n          while (temp.size !== newState[\"size\"]) {\n            temp.add(this.getRandomElement());\n          }\n          temp = Array.from(temp);\n          newState[\"arr\"] = temp;\n        } else {\n          if (controllerData[\"randomize\"] === true) {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(controllerData[\"pointerColor\"]);\n            newState[\"sortedColor\"] = this.getColor(controllerData[\"sortedColor\"]);\n            newState[\"randomize\"] = controllerData[\"randomize\"];\n            newState[\"sort\"] = controllerData[\"sort\"];\n            while (temp.size !== newState[\"size\"]) {\n              temp.add(this.getRandomElement());\n            }\n            temp = Array.from(temp);\n            newState[\"arr\"] = temp;\n            let bars = document.getElementsByClassName(\"array-bar\");\n            for (let e = 0; e < bars.length; e++) bars[e].style.backgroundColor = newState[\"barColor\"];\n          } else {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(controllerData[\"pointerColor\"]);\n            newState[\"sortedColor\"] = this.getColor(controllerData[\"sortedColor\"]);\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"arr\"] = this.state.arr;\n          }\n        }\n        this.setState(newState);\n      } // else sort==false\n    }\n  } //component did update ends\n\n  //--------------------------SORTING ALGORITHMS STARTS FROM HERE--------------------------------\n  async bubbleSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let e, f, eIndex, fIndex;\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        bars[j + 1].style.backgroundColor = this.state.pointerColor;\n        e = parseInt(bars[j].innerHTML);\n        eIndex = j;\n        f = parseInt(bars[j + 1].innerHTML);\n        fIndex = j + 1;\n        if (e > f) {\n          let gValue = bars[eIndex].innerHTML;\n          let gWidth = bars[eIndex].style.width;\n          bars[eIndex].innerHTML = bars[fIndex].innerHTML;\n          bars[eIndex].style.width = bars[fIndex].style.width;\n          bars[fIndex].innerHTML = gValue;\n          bars[fIndex].style.width = gWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n        }\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[j + 1].style.backgroundColor = this.state.barColor;\n      }\n      bars[n - i - 1].style.backgroundColor = this.state.sortedColor;\n    }\n    bars[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n  async cocktailSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let swapped = true;\n    let start = 0;\n    let end = n - 1;\n    let gValue, gWidth;\n    while (swapped) {\n      swapped = false;\n      for (let i = start; i < end; ++i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      if (!swapped) break;\n      swapped = false;\n      bars[end].style.backgroundColor = this.state.sortedColor;\n      --end;\n      for (let i = end - 1; i >= start; --i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      bars[start].style.backgroundColor = this.state.sortedColor;\n      ++start;\n    }\n    let i = start;\n    let j = end;\n    while (i <= j) {\n      bars[j].style.backgroundColor = this.state.sortedColor;\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n      j--;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n  async heapSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = document.getElementsByClassName(\"array-bar\");\n    let temp, tempWidth;\n    let leftIndex, rightIndex, x, y;\n    let end;\n    //building heap\n    for (let e = 1; e < arr.length; e++) {\n      let i = e;\n      while (i > 0) {\n        if (parseInt(arr[i].innerHTML) > parseInt(arr[Math.floor((i - 1) / 2)].innerHTML)) {\n          x = i;\n          y = Math.floor((i - 1) / 2);\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = y;\n        } else {\n          break;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    //heapify\n    for (let e = arr.length - 1; e > 0; e--) {\n      arr[0].style.backgroundColor = this.state.pointerColor;\n      arr[e].style.backgroundColor = this.state.pointerColor;\n      temp = arr[0].innerHTML;\n      tempWidth = arr[0].style.width;\n      arr[0].innerHTML = arr[e].innerHTML;\n      arr[0].style.width = arr[e].style.width;\n      arr[e].innerHTML = temp;\n      arr[e].style.width = tempWidth;\n      await this.sleep(this.getSpeed(this.state.speed));\n      arr[0].style.backgroundColor = this.state.barColor;\n      arr[e].style.backgroundColor = this.state.barColor;\n      end = e - 1;\n      let i = 0;\n      while (i <= end) {\n        leftIndex = 2 * i + 1;\n        if (leftIndex > end) break;\n        rightIndex = 2 * i + 2;\n        if (rightIndex > end) rightIndex = leftIndex;\n        if (parseInt(arr[i].innerHTML) >= Math.max(parseInt(arr[leftIndex].innerHTML), parseInt(arr[rightIndex].innerHTML))) break;\n        if (parseInt(arr[leftIndex].innerHTML) >= parseInt(arr[rightIndex].innerHTML)) {\n          x = i;\n          y = leftIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = leftIndex;\n        } else {\n          x = i;\n          y = rightIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = rightIndex;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n      arr[e].style.backgroundColor = this.state.sortedColor;\n    }\n    arr[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n  async insertionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let p, g, gValue, gWidth, jValue, jWidth;\n    for (let i = 1; i <= n - 1; i++) {\n      p = i;\n      bars[i].style.backgroundColor = this.state.pointerColor;\n      gValue = parseInt(bars[p].innerHTML);\n      gWidth = bars[p].style.width;\n      for (let j = p - 1; j >= 0; j--, p--) {\n        jValue = parseInt(bars[j].innerHTML);\n        jWidth = bars[j].style.width;\n        g = j;\n        bars[g].style.backgroundColor = this.state.pointerColor;\n        if (gValue >= jValue) {\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[g].style.backgroundColor = this.state.sortedColor;\n          break;\n        }\n        bars[j + 1].innerHTML = jValue;\n        bars[j + 1].style.width = jWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[g].style.backgroundColor = this.state.sortedColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      bars[p].innerHTML = gValue;\n      bars[p].style.width = gWidth;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n  async linearSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let i, j, gValue, gWidth;\n    i = 0;\n    while (i <= n - 2) {\n      j = i + 1;\n      while (j <= n - 1) {\n        bars[i].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[i].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[j].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[j].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[j].innerHTML);\n          bars[i].style.width = bars[j].style.width;\n          bars[j].innerHTML = gValue;\n          bars[j].style.width = gWidth;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[i].style.backgroundColor = this.state.barColor;\n        j++;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n  async mergeSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let graphics = [];\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    this.mergeSort(arr, low, high, graphics);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.pointerColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        bars[graphics[i].first].innerHTML = graphics[i].second;\n        bars[graphics[i].first].style.width = graphics[i].second + \"px\";\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n  mergeSort(arr, low, high, graphics) {\n    if (low >= high) return;\n    var middle = Math.floor((low + high) / 2);\n    this.mergeSort(arr, low, middle, graphics);\n    this.mergeSort(arr, middle + 1, high, graphics);\n    this.merge(arr, low, high, graphics);\n  }\n  merge(arr, low, high, graphics) {\n    let middle = Math.floor((low + high) / 2);\n    let temp = new Array(high - low + 1);\n    let i = low;\n    let j = middle + 1;\n    let r = 0;\n    while (i <= middle && j <= high) {\n      graphics.push(new Tuple(i, j, \"add\"));\n      graphics.push(new Tuple(i, j, \"remove\"));\n      if (arr[i] <= arr[j]) {\n        temp[r] = arr[i];\n        r++;\n        i++;\n      } else {\n        temp[r] = arr[j];\n        r++;\n        j++;\n      }\n    }\n    while (i <= middle) {\n      graphics.push(new Tuple(i, i, \"add\"));\n      graphics.push(new Tuple(i, i, \"remove\"));\n      temp[r] = arr[i];\n      r++;\n      i++;\n    }\n    while (j <= high) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      graphics.push(new Tuple(j, j, \"remove\"));\n      temp[r] = arr[j];\n      r++;\n      j++;\n    }\n    i = low;\n    for (let k = 0; k < temp.length;) {\n      graphics.push(new Tuple(i, temp[k], \"swap\"));\n      arr[i] = temp[k];\n      i++;\n      k++;\n    }\n  }\n  async quickSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    let graphics = [];\n    let gValue, gWidth;\n    let sorted = this.state.arr.slice().sort(function (a, b) {\n      return a - b;\n    });\n    this.quickSort(arr, low, high, graphics, sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.pointerColor;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n      if (graphics[i].operation === \"fix\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.sortedColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n        gValue = bars[graphics[i].first].innerHTML;\n        gWidth = bars[graphics[i].first].style.width;\n        bars[graphics[i].first].innerHTML = bars[graphics[i].second].innerHTML;\n        bars[graphics[i].first].style.width = bars[graphics[i].second].style.width;\n        bars[graphics[i].second].innerHTML = gValue;\n        bars[graphics[i].second].style.width = gWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n  quickSort(arr, low, high, graphics, sorted) {\n    if (low < high) {\n      let pi = this.partition(arr, low, high, graphics, sorted);\n      this.quickSort(arr, low, pi - 1, graphics, sorted);\n      this.quickSort(arr, pi + 1, high, graphics, sorted);\n    }\n  }\n  partition(arr, low, high, graphics, sorted) {\n    let g;\n    let pivot = arr[high];\n    let i = low - 1;\n    graphics.push(new Tuple(high, high, \"add\"));\n    for (let j = low; j <= high - 1; j++) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      if (arr[j] < pivot) {\n        i++;\n        g = arr[i];\n        arr[i] = arr[j];\n        arr[j] = g;\n        graphics.push(new Tuple(i, j, \"add\"));\n        graphics.push(new Tuple(i, j, \"remove\"));\n        graphics.push(new Tuple(i, j, \"swap\"));\n      }\n      graphics.push(new Tuple(j, j, \"remove\"));\n    }\n    g = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = g;\n    graphics.push(new Tuple(i + 1, high, \"add\"));\n    graphics.push(new Tuple(i + 1, high, \"remove\"));\n    graphics.push(new Tuple(i + 1, high, \"swap\"));\n    graphics.push(new Tuple(high, high, \"remove\"));\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k] === sorted[k]) {\n        graphics.push(new Tuple(k, k, \"fix\"));\n      }\n    }\n    graphics.push(new Tuple(i + 1, i + 1, \"fix\"));\n    return i + 1;\n  }\n  async selectionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let m, r, gValue, gWidth;\n    for (let i = 0; i < n - 1; i++) {\n      m = i;\n      for (let j = i + 1; j < n; j++) {\n        r = m;\n        bars[r].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[m].innerHTML)) {\n          m = j;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[r].style.backgroundColor = this.state.barColor;\n        bars[j].style.backgroundColor = this.state.barColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      gWidth = bars[i].style.width;\n      gValue = parseInt(bars[i].innerHTML);\n      bars[i].innerHTML = parseInt(bars[m].innerHTML);\n      bars[i].style.width = bars[m].style.width;\n      bars[m].innerHTML = gValue;\n      bars[m].style.width = gWidth;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  getSpeed(speed) {\n    switch (speed) {\n      case \"Very Fast\":\n        return 25;\n      case \"Normal\":\n        return 250;\n      case \"Slow\":\n        return 500;\n      case \"Very Slow\":\n        return 1000;\n      default:\n        return 100;\n    }\n  }\n  getColor(barColor) {\n    switch (barColor) {\n      case \"Black\":\n        return \"#000000\";\n      case \"Green\":\n        return \"#026423d9\";\n      case \"Pink\":\n        return \"#d90d73cc\";\n      case \"Cyan\":\n        return \"#00e9e9\";\n      case \"Grey\":\n        return \"#424444c2\";\n      default:\n        return \"#000030ed\";\n    }\n  }\n  getBarHeight() {\n    let height = (this.height - 300 - parseInt(this.state.size) * 5) / parseInt(this.state.size);\n    return height;\n  }\n  getfontHeight() {\n    let fontHeight = (this.height - 370 - parseInt(this.state.size) * 5) / parseInt(this.state.size);\n    return fontHeight - 3;\n  }\n  getRandomElement() {\n    var max = 0;\n    var min = 50;\n    if (this.width < 768) max = this.width * 5 / 10;else max = this.width * 4 / 10;\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n  render() {\n    console.log(\"Render of sorting\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"barView\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 7\n      }\n    }, this.state.arr.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        width: `${value}px`,\n        backgroundColor: `${this.state.barColor}`,\n        height: `${this.getBarHeight()}px`,\n        fontSize: `${this.getfontHeight()}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 11\n      }\n    }, value)));\n  }\n}\nexport default SortingVisualizer;","map":{"version":3,"names":["React","Tuple","constructor","first","second","operation","SortingVisualizer","Component","props","state","arr","sortingAlgorithm","size","speed","barColor","pointerColor","sort","randomize","sorted","width","height","componentDidMount","console","log","window","screen","controllerData","temp","Set","parseInt","add","getRandomElement","Array","from","setState","getColor","sortedColor","componentDidUpdate","previousProps","previousState","cd","cocktailSort","heapSort","insertionSort","linearSort","mergeSortUtil","quickSortUtil","selectionSort","bubbleSort","newState","bars","document","getElementsByClassName","e","length","style","backgroundColor","visualizerDataHandler","n","f","eIndex","fIndex","i","j","innerHTML","gValue","gWidth","sleep","getSpeed","swapped","start","end","tempWidth","leftIndex","rightIndex","x","y","Math","floor","max","p","g","jValue","jWidth","graphics","slice","low","high","mergeSort","middle","merge","r","push","k","a","b","quickSort","pi","partition","pivot","m","ms","Promise","resolve","setTimeout","getBarHeight","getfontHeight","fontHeight","min","random","render","createElement","id","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","value","idx","className","key","fontSize"],"sources":["C:/Desktop/SortingVisualizer/Sorting-Algorithm-Visualizer-main/src/SortingVisualizer.js"],"sourcesContent":["import React from \"react\";\nimport \"./SortingVisualizer.css\";\n\nclass Tuple {\n  constructor(first, second, operation) {\n    this.first = first;\n    this.second = second;\n    this.operation = operation;\n  }\n}\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [],\n      sortingAlgorithm: \"\",\n      size: \"\",\n      speed: \"\",\n      barColor: \"\",\n      pointerColor: \"\",\n      sort: false,\n      randomize: false,\n    };\n    this.sorted = false;\n    this.width = 0;\n    this.height = 0;\n  }\n\n  componentDidMount() {\n    console.log(\"Console did mount\")\n    this.width = window.screen.width;\n    this.height = window.screen.height;\n    \n    \n    let controllerData = this.props.controllerData;\n    let temp = new Set();\n    while (temp.size !== parseInt(controllerData[\"size\"])) {\n      temp.add(this.getRandomElement());\n    }\n    temp = Array.from(temp);\n    this.setState({\n      arr: temp,\n      sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n      size: controllerData[\"size\"],\n      speed: controllerData[\"speed\"],\n      barColor: this.getColor(controllerData[\"barColor\"]),\n      pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n      sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n      sort: controllerData[\"sort\"],\n      randomize: controllerData[\"randomize\"],\n    });\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    //console.log(\"Component did update mount\")\n    if (previousProps.controllerData !== this.props.controllerData) {\n      let controllerData = this.props.controllerData;\n      let cd = {};\n      if (controllerData[\"sort\"] === true) {\n        cd = {\n          sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n          size: controllerData[\"size\"],\n          speed: controllerData[\"speed\"],\n          barColor: this.getColor(controllerData[\"barColor\"]),\n          pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n          sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n          sort: controllerData[\"sort\"],\n          randomize: controllerData[\"randomize\"],\n        };\n        switch (controllerData.sortingAlgorithm) {\n          case \"Cocktail Sort\":\n            this.setState(cd, function () {\n              this.cocktailSort();\n            });\n            break;\n\n          case \"Heap Sort\":\n            this.setState(cd, function () {\n              this.heapSort();\n            });\n            break;\n\n          case \"Insertion Sort\":\n            this.setState(cd, function () {\n              this.insertionSort();\n            });\n            break;\n\n          case \"Linear Sort\":\n            this.setState(cd, function () {\n              this.linearSort();\n            });\n            break;\n\n          case \"Merge Sort\":\n            this.setState(cd, function () {\n              this.mergeSortUtil();\n            });\n            break;\n\n          case \"Quick Sort\":\n            this.setState(cd, function () {\n              this.quickSortUtil();\n            });\n            break;\n\n          case \"Selection Sort\":\n            this.setState(cd, function () {\n              this.selectionSort();\n              console.log(\"Selection sort\")\n            });\n            break;\n\n          default:\n            this.setState(cd, function () {\n              this.bubbleSort();\n              //console.log(\"bubble sort\")\n            });\n            break;\n        }\n      } // if sort=== true ends\n      else {\n        let newState = {};\n        let temp = new Set();\n        if (parseInt(this.state[\"size\"]) !== parseInt(controllerData[\"size\"])) {\n          newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n          newState[\"size\"] = parseInt(controllerData[\"size\"]);\n          newState[\"speed\"] = controllerData[\"speed\"];\n          newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n          newState[\"pointerColor\"] = this.getColor(\n            controllerData[\"pointerColor\"]\n          );\n          newState[\"sortedColor\"] = this.getColor(\n            controllerData[\"sortedColor\"]\n          );\n          newState[\"randomize\"] = controllerData[\"randomize\"];\n          newState[\"sort\"] = controllerData[\"sort\"];\n          while (temp.size !== newState[\"size\"]) {\n            temp.add(this.getRandomElement());\n          }\n          temp = Array.from(temp);\n          newState[\"arr\"] = temp;\n        } else {\n          if (controllerData[\"randomize\"] === true) {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(\n              controllerData[\"pointerColor\"]\n            );\n            newState[\"sortedColor\"] = this.getColor(\n              controllerData[\"sortedColor\"]\n            );\n            newState[\"randomize\"] = controllerData[\"randomize\"];\n            newState[\"sort\"] = controllerData[\"sort\"];\n            while (temp.size !== newState[\"size\"]) {\n              temp.add(this.getRandomElement());\n            }\n            temp = Array.from(temp);\n            newState[\"arr\"] = temp;\n            let bars = document.getElementsByClassName(\"array-bar\");\n            for (let e = 0; e < bars.length; e++)\n              bars[e].style.backgroundColor = newState[\"barColor\"];\n          } else {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(\n              controllerData[\"pointerColor\"]\n            );\n            newState[\"sortedColor\"] = this.getColor(\n              controllerData[\"sortedColor\"]\n            );\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"arr\"] = this.state.arr;\n          }\n        }\n        this.setState(newState);\n      }// else sort==false\n    }\n  } //component did update ends\n\n\n  //--------------------------SORTING ALGORITHMS STARTS FROM HERE--------------------------------\n  async bubbleSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let e, f, eIndex, fIndex;\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        \n        bars[j + 1].style.backgroundColor = this.state.pointerColor;\n        \n        e = parseInt(bars[j].innerHTML);\n        eIndex = j;\n        f = parseInt(bars[j + 1].innerHTML);\n        fIndex = j + 1;\n        if (e > f) {\n          let gValue = bars[eIndex].innerHTML;\n          let gWidth = bars[eIndex].style.width;\n          bars[eIndex].innerHTML = bars[fIndex].innerHTML;\n          bars[eIndex].style.width = bars[fIndex].style.width;\n          bars[fIndex].innerHTML = gValue;\n          bars[fIndex].style.width = gWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n        }\n        bars[j].style.backgroundColor = this.state.barColor;\n        \n        bars[j + 1].style.backgroundColor = this.state.barColor;\n        \n      }\n      bars[n - i - 1].style.backgroundColor = this.state.sortedColor;\n    }\n    bars[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async cocktailSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let swapped = true;\n    let start = 0;\n    let end = n - 1;\n    let gValue, gWidth;\n    while (swapped) {\n      swapped = false;\n      for (let i = start; i < end; ++i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      if (!swapped) break;\n      swapped = false;\n      bars[end].style.backgroundColor = this.state.sortedColor;\n      --end;\n      for (let i = end - 1; i >= start; --i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      bars[start].style.backgroundColor = this.state.sortedColor;\n      ++start;\n    }\n    let i = start;\n    let j = end;\n    while (i <= j) {\n      bars[j].style.backgroundColor = this.state.sortedColor;\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n      j--;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async heapSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = document.getElementsByClassName(\"array-bar\");\n    let temp, tempWidth;\n    let leftIndex, rightIndex, x, y;\n    let end;\n    //building heap\n    for (let e = 1; e < arr.length; e++) {\n      let i = e;\n      while (i > 0) {\n        if (\n          parseInt(arr[i].innerHTML) >\n          parseInt(arr[Math.floor((i - 1) / 2)].innerHTML)\n        ) {\n          x = i;\n          y = Math.floor((i - 1) / 2);\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = y;\n        } else {\n          break;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    //heapify\n    for (let e = arr.length - 1; e > 0; e--) {\n      arr[0].style.backgroundColor = this.state.pointerColor;\n      arr[e].style.backgroundColor = this.state.pointerColor;\n      temp = arr[0].innerHTML;\n      tempWidth = arr[0].style.width;\n      arr[0].innerHTML = arr[e].innerHTML;\n      arr[0].style.width = arr[e].style.width;\n      arr[e].innerHTML = temp;\n      arr[e].style.width = tempWidth;\n      await this.sleep(this.getSpeed(this.state.speed));\n      arr[0].style.backgroundColor = this.state.barColor;\n      arr[e].style.backgroundColor = this.state.barColor;\n      end = e - 1;\n      let i = 0;\n      while (i <= end) {\n        leftIndex = 2 * i + 1;\n        if (leftIndex > end) break;\n        rightIndex = 2 * i + 2;\n        if (rightIndex > end) rightIndex = leftIndex;\n        if (\n          parseInt(arr[i].innerHTML) >=\n          Math.max(\n            parseInt(arr[leftIndex].innerHTML),\n            parseInt(arr[rightIndex].innerHTML)\n          )\n        )\n          break;\n        if (\n          parseInt(arr[leftIndex].innerHTML) >=\n          parseInt(arr[rightIndex].innerHTML)\n        ) {\n          x = i;\n          y = leftIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = leftIndex;\n        } else {\n          x = i;\n          y = rightIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = rightIndex;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n      arr[e].style.backgroundColor = this.state.sortedColor;\n    }\n    arr[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async insertionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let p, g, gValue, gWidth, jValue, jWidth;\n    for (let i = 1; i <= n - 1; i++) {\n      p = i;\n      bars[i].style.backgroundColor = this.state.pointerColor;\n      gValue = parseInt(bars[p].innerHTML);\n      gWidth = bars[p].style.width;\n      for (let j = p - 1; j >= 0; j--, p--) {\n        jValue = parseInt(bars[j].innerHTML);\n        jWidth = bars[j].style.width;\n        g = j;\n        bars[g].style.backgroundColor = this.state.pointerColor;\n        if (gValue >= jValue) {\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[g].style.backgroundColor = this.state.sortedColor;\n          break;\n        }\n        bars[j + 1].innerHTML = jValue;\n        bars[j + 1].style.width = jWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[g].style.backgroundColor = this.state.sortedColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      bars[p].innerHTML = gValue;\n      bars[p].style.width = gWidth;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async linearSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let i, j, gValue, gWidth;\n    i = 0;\n    while (i <= n - 2) {\n      j = i + 1;\n      while (j <= n - 1) {\n        bars[i].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[i].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[j].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[j].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[j].innerHTML);\n          bars[i].style.width = bars[j].style.width;\n          bars[j].innerHTML = gValue;\n          bars[j].style.width = gWidth;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[i].style.backgroundColor = this.state.barColor;\n        j++;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async mergeSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let graphics = [];\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    this.mergeSort(arr, low, high, graphics);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor =\n          this.state.pointerColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        bars[graphics[i].first].innerHTML = graphics[i].second;\n        bars[graphics[i].first].style.width = graphics[i].second + \"px\";\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  mergeSort(arr, low, high, graphics) {\n    if (low >= high) return;\n    var middle = Math.floor((low + high) / 2);\n    this.mergeSort(arr, low, middle, graphics);\n    this.mergeSort(arr, middle + 1, high, graphics);\n    this.merge(arr, low, high, graphics);\n  }\n\n  merge(arr, low, high, graphics) {\n    let middle = Math.floor((low + high) / 2);\n    let temp = new Array(high - low + 1);\n    let i = low;\n    let j = middle + 1;\n    let r = 0;\n    while (i <= middle && j <= high) {\n      graphics.push(new Tuple(i, j, \"add\"));\n      graphics.push(new Tuple(i, j, \"remove\"));\n      if (arr[i] <= arr[j]) {\n        temp[r] = arr[i];\n        r++;\n        i++;\n      } else {\n        temp[r] = arr[j];\n        r++;\n        j++;\n      }\n    }\n    while (i <= middle) {\n      graphics.push(new Tuple(i, i, \"add\"));\n      graphics.push(new Tuple(i, i, \"remove\"));\n      temp[r] = arr[i];\n      r++;\n      i++;\n    }\n    while (j <= high) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      graphics.push(new Tuple(j, j, \"remove\"));\n      temp[r] = arr[j];\n      r++;\n      j++;\n    }\n    i = low;\n    for (let k = 0; k < temp.length; ) {\n      graphics.push(new Tuple(i, temp[k], \"swap\"));\n      arr[i] = temp[k];\n      i++;\n      k++;\n    }\n  }\n\n  async quickSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    let graphics = [];\n    let gValue, gWidth;\n    let sorted = this.state.arr.slice().sort(function (a, b) {\n      return a - b;\n    });\n    this.quickSort(arr, low, high, graphics, sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor =\n          this.state.pointerColor;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n      if (graphics[i].operation === \"fix\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.sortedColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n        gValue = bars[graphics[i].first].innerHTML;\n        gWidth = bars[graphics[i].first].style.width;\n        bars[graphics[i].first].innerHTML = bars[graphics[i].second].innerHTML;\n        bars[graphics[i].first].style.width =\n          bars[graphics[i].second].style.width;\n        bars[graphics[i].second].innerHTML = gValue;\n        bars[graphics[i].second].style.width = gWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  quickSort(arr, low, high, graphics, sorted) {\n    if (low < high) {\n      let pi = this.partition(arr, low, high, graphics, sorted);\n      this.quickSort(arr, low, pi - 1, graphics, sorted);\n      this.quickSort(arr, pi + 1, high, graphics, sorted);\n    }\n  }\n\n  partition(arr, low, high, graphics, sorted) {\n    let g;\n    let pivot = arr[high];\n    let i = low - 1;\n    graphics.push(new Tuple(high, high, \"add\"));\n    for (let j = low; j <= high - 1; j++) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      if (arr[j] < pivot) {\n        i++;\n        g = arr[i];\n        arr[i] = arr[j];\n        arr[j] = g;\n        graphics.push(new Tuple(i, j, \"add\"));\n        graphics.push(new Tuple(i, j, \"remove\"));\n        graphics.push(new Tuple(i, j, \"swap\"));\n      }\n      graphics.push(new Tuple(j, j, \"remove\"));\n    }\n    g = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = g;\n    graphics.push(new Tuple(i + 1, high, \"add\"));\n    graphics.push(new Tuple(i + 1, high, \"remove\"));\n    graphics.push(new Tuple(i + 1, high, \"swap\"));\n    graphics.push(new Tuple(high, high, \"remove\"));\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k] === sorted[k]) {\n        graphics.push(new Tuple(k, k, \"fix\"));\n      }\n    }\n    graphics.push(new Tuple(i + 1, i + 1, \"fix\"));\n    return i + 1;\n  }\n\n  async selectionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let m, r, gValue, gWidth;\n    for (let i = 0; i < n - 1; i++) {\n      m = i;\n      for (let j = i + 1; j < n; j++) {\n        r = m;\n        bars[r].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[m].innerHTML)) {\n          m = j;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[r].style.backgroundColor = this.state.barColor;\n        bars[j].style.backgroundColor = this.state.barColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      gWidth = bars[i].style.width;\n      gValue = parseInt(bars[i].innerHTML);\n      bars[i].innerHTML = parseInt(bars[m].innerHTML);\n      bars[i].style.width = bars[m].style.width;\n      bars[m].innerHTML = gValue;\n      bars[m].style.width = gWidth;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  getSpeed(speed) {\n    switch (speed) {\n      case \"Very Fast\":\n        return 25;\n      case \"Normal\":\n        return 250;\n      case \"Slow\":\n        return 500;\n      case \"Very Slow\":\n        return 1000;\n      default:\n        return 100;\n    }\n  }\n\n  getColor(barColor) {\n    switch (barColor) {\n      case \"Black\":\n        return \"#000000\";\n      case \"Green\":\n        return \"#026423d9\";\n      case \"Pink\":\n        return \"#d90d73cc\";\n      case \"Cyan\":\n        return \"#00e9e9\";\n      case \"Grey\":\n        return \"#424444c2\";\n      default:\n        return \"#000030ed\";\n    }\n  }\n\n  getBarHeight() {\n    let height =\n      (this.height - 300 - parseInt(this.state.size) * 5) /\n      parseInt(this.state.size);\n    return height;\n  }\n\n  getfontHeight() {\n    let fontHeight =\n      (this.height - 370 - parseInt(this.state.size) * 5) /\n      parseInt(this.state.size);\n    return fontHeight - 3;\n  }\n\n  getRandomElement() {\n    var max = 0;\n    var min = 50;\n    if (this.width < 768) max = (this.width * 5) / 10;\n    else max = (this.width * 4) / 10;\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  render() {\n    console.log(\"Render of sorting\")\n    return (\n      <div id=\"barView\">\n        {this.state.arr.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              width: `${value}px`,\n              backgroundColor: `${this.state.barColor}`,\n              height: `${this.getBarHeight()}px`,\n              fontSize: `${this.getfontHeight()}px`,\n            }}\n          >\n            {value}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default SortingVisualizer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}